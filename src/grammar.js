// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }


const moo = require("moo");
let lexer = require('./states');
const postProcessor = require('./postProcessors');
const { _ } = postProcessor;

var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "main$subexpression$1$ebnf$1$subexpression$1", "symbols": [(lexer.has("date") ? {type: "date"} : date), "__"]},
    {"name": "main$subexpression$1$ebnf$1", "symbols": ["main$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "main$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "main$subexpression$1", "symbols": ["main$subexpression$1$ebnf$1", "note_body"]},
    {"name": "main", "symbols": ["_", "main$subexpression$1", "_"], "postprocess": _('second', 'flatten', 'flatten', 'filter', 'rollup')},
    {"name": "main$subexpression$2$ebnf$1$subexpression$1", "symbols": [(lexer.has("date") ? {type: "date"} : date), "__"]},
    {"name": "main$subexpression$2$ebnf$1", "symbols": ["main$subexpression$2$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "main$subexpression$2$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "main$subexpression$2", "symbols": ["main$subexpression$2$ebnf$1", "folder_form"]},
    {"name": "main", "symbols": ["_", "main$subexpression$2", "_"], "postprocess": _('second', 'flatten', 'flatten', 'filter',  'rollup')},
    {"name": "main$subexpression$3$ebnf$1$subexpression$1", "symbols": [(lexer.has("date") ? {type: "date"} : date), "__"]},
    {"name": "main$subexpression$3$ebnf$1", "symbols": ["main$subexpression$3$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "main$subexpression$3$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "main$subexpression$3", "symbols": ["main$subexpression$3$ebnf$1", "todo_form"]},
    {"name": "main", "symbols": ["_", "main$subexpression$3", "_"], "postprocess": _('second', 'flatten', 'flatten', 'filter', 'rollup')},
    {"name": "main", "symbols": ["reaction_form"], "postprocess": _('rollup')},
    {"name": "reaction_form$ebnf$1", "symbols": [(lexer.has("text_blob") ? {type: "text_blob"} : text_blob)], "postprocess": id},
    {"name": "reaction_form$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "reaction_form$ebnf$2", "symbols": [(lexer.has("reaction_close") ? {type: "reaction_close"} : reaction_close)], "postprocess": id},
    {"name": "reaction_form$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "reaction_form$ebnf$3", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "reaction_form$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "reaction_form", "symbols": [(lexer.has("reaction_open") ? {type: "reaction_open"} : reaction_open), "reaction_form$ebnf$1", "reaction_form$ebnf$2", "reaction_form$ebnf$3"], "postprocess": _('flatten', 'filter', 'reaction')},
    {"name": "folder_form$ebnf$1", "symbols": [(lexer.has("folder") ? {type: "folder"} : folder)]},
    {"name": "folder_form$ebnf$1", "symbols": ["folder_form$ebnf$1", (lexer.has("folder") ? {type: "folder"} : folder)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "folder_form$ebnf$2", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "folder_form$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "folder_form$ebnf$3$subexpression$1", "symbols": ["__", "note_body"]},
    {"name": "folder_form$ebnf$3", "symbols": ["folder_form$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "folder_form$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "folder_form", "symbols": ["folder_form$ebnf$1", "folder_form$ebnf$2", "folder_form$ebnf$3"], "postprocess": _('flatten', 'flatten', 'filter')},
    {"name": "folder_form$ebnf$4", "symbols": [(lexer.has("folder") ? {type: "folder"} : folder)]},
    {"name": "folder_form$ebnf$4", "symbols": ["folder_form$ebnf$4", (lexer.has("folder") ? {type: "folder"} : folder)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "folder_form", "symbols": ["folder_form$ebnf$4", "__", "todo_form"], "postprocess": _('flatten', 'filter')},
    {"name": "todo_form$subexpression$1", "symbols": [(lexer.has("todo") ? {type: "todo"} : todo)]},
    {"name": "todo_form$subexpression$1", "symbols": [(lexer.has("done") ? {type: "done"} : done)]},
    {"name": "todo_form$ebnf$1$subexpression$1", "symbols": ["__", "note_body"]},
    {"name": "todo_form$ebnf$1", "symbols": ["todo_form$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "todo_form$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "todo_form", "symbols": ["todo_form$subexpression$1", "todo_form$ebnf$1"], "postprocess": _('flatten', 'flatten', 'filter')},
    {"name": "note_body$ebnf$1", "symbols": []},
    {"name": "note_body$ebnf$1$subexpression$1", "symbols": ["__", "standard_token"]},
    {"name": "note_body$ebnf$1", "symbols": ["note_body$ebnf$1", "note_body$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "note_body", "symbols": ["standard_token", "note_body$ebnf$1"], "postprocess": _('flatten', 'flatten', 'flatten')},
    {"name": "standard_token$subexpression$1$ebnf$1", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "standard_token$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "standard_token$subexpression$1", "symbols": [(lexer.has("tag") ? {type: "tag"} : tag), "standard_token$subexpression$1$ebnf$1"]},
    {"name": "standard_token$subexpression$1$ebnf$2", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "standard_token$subexpression$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "standard_token$subexpression$1", "symbols": [(lexer.has("event") ? {type: "event"} : event), "standard_token$subexpression$1$ebnf$2"]},
    {"name": "standard_token$subexpression$1$ebnf$3", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "standard_token$subexpression$1$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "standard_token$subexpression$1", "symbols": [(lexer.has("url") ? {type: "url"} : url), "standard_token$subexpression$1$ebnf$3"]},
    {"name": "standard_token$subexpression$1$ebnf$4", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "standard_token$subexpression$1$ebnf$4", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "standard_token$subexpression$1", "symbols": [(lexer.has("word") ? {type: "word"} : word), "standard_token$subexpression$1$ebnf$4"]},
    {"name": "standard_token$subexpression$1$ebnf$5", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "standard_token$subexpression$1$ebnf$5", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "standard_token$subexpression$1", "symbols": [(lexer.has("bean") ? {type: "bean"} : bean), "standard_token$subexpression$1$ebnf$5"]},
    {"name": "standard_token$subexpression$1", "symbols": ["formula"]},
    {"name": "standard_token", "symbols": ["standard_token$subexpression$1"], "postprocess": _('flatten', 'flatten', 'filter')},
    {"name": "formula$ebnf$1", "symbols": [(lexer.has("arg") ? {type: "arg"} : arg)], "postprocess": id},
    {"name": "formula$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open), "_", (lexer.has("lparen") ? {type: "lparen"} : lparen), "_", "formula$ebnf$1", "_", (lexer.has("rparen") ? {type: "rparen"} : rparen), "_", "func"], "postprocess": _('formula')},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open)], "postprocess": _('formula')},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open), "_", (lexer.has("lparen") ? {type: "lparen"} : lparen)], "postprocess": _('formula')},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open), "_", (lexer.has("lparen") ? {type: "lparen"} : lparen), "_", (lexer.has("arg") ? {type: "arg"} : arg)], "postprocess": _('formula')},
    {"name": "formula$ebnf$2", "symbols": [(lexer.has("arg") ? {type: "arg"} : arg)], "postprocess": id},
    {"name": "formula$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open), "_", (lexer.has("lparen") ? {type: "lparen"} : lparen), "_", "formula$ebnf$2", "_", (lexer.has("rparen") ? {type: "rparen"} : rparen)], "postprocess": _('formula')},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open), "_", (lexer.has("error") ? {type: "error"} : error)], "postprocess": _('formula')},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open), "_", (lexer.has("lparen") ? {type: "lparen"} : lparen), "_", (lexer.has("error") ? {type: "error"} : error)], "postprocess": _('formula')},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open), "_", (lexer.has("lparen") ? {type: "lparen"} : lparen), "_", (lexer.has("arg") ? {type: "arg"} : arg), "_", (lexer.has("error") ? {type: "error"} : error)], "postprocess": _('formula')},
    {"name": "formula$ebnf$3", "symbols": [(lexer.has("arg") ? {type: "arg"} : arg)], "postprocess": id},
    {"name": "formula$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "formula", "symbols": [(lexer.has("formula_open") ? {type: "formula_open"} : formula_open), "_", (lexer.has("lparen") ? {type: "lparen"} : lparen), "_", "formula$ebnf$3", "_", (lexer.has("rparen") ? {type: "rparen"} : rparen), "_", (lexer.has("error") ? {type: "error"} : error)], "postprocess": _('formula')},
    {"name": "func$ebnf$1", "symbols": []},
    {"name": "func$ebnf$1$subexpression$1", "symbols": [(lexer.has("arg") ? {type: "arg"} : arg), "_"]},
    {"name": "func$ebnf$1$subexpression$1", "symbols": ["func", "_"]},
    {"name": "func$ebnf$1", "symbols": ["func$ebnf$1", "func$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "func", "symbols": [(lexer.has("lparen") ? {type: "lparen"} : lparen), "_", (lexer.has("operator") ? {type: "operator"} : operator), "__", "func$ebnf$1", (lexer.has("rparen") ? {type: "rparen"} : rparen)], "postprocess": _('func')},
    {"name": "func$ebnf$2", "symbols": []},
    {"name": "func$ebnf$2$subexpression$1", "symbols": [(lexer.has("arg") ? {type: "arg"} : arg), "_"]},
    {"name": "func$ebnf$2$subexpression$1", "symbols": ["func", "_"]},
    {"name": "func$ebnf$2", "symbols": ["func$ebnf$2", "func$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "func$subexpression$1", "symbols": [(lexer.has("arg") ? {type: "arg"} : arg)]},
    {"name": "func$subexpression$1", "symbols": ["func"]},
    {"name": "func$ebnf$3$subexpression$1", "symbols": ["_", (lexer.has("error") ? {type: "error"} : error)]},
    {"name": "func$ebnf$3", "symbols": ["func$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "func$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "func", "symbols": [(lexer.has("lparen") ? {type: "lparen"} : lparen), "_", (lexer.has("operator") ? {type: "operator"} : operator), "__", "func$ebnf$2", "func$subexpression$1", "func$ebnf$3"], "postprocess": _('func')},
    {"name": "func$ebnf$4", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "func$ebnf$4", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "func", "symbols": [(lexer.has("lparen") ? {type: "lparen"} : lparen), "_", (lexer.has("operator") ? {type: "operator"} : operator), "__", "func$ebnf$4"], "postprocess": _('func')},
    {"name": "func$ebnf$5", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "func$ebnf$5", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "func", "symbols": [(lexer.has("lparen") ? {type: "lparen"} : lparen), "_", (lexer.has("operator") ? {type: "operator"} : operator), "func$ebnf$5"], "postprocess": _('func')},
    {"name": "func$ebnf$6", "symbols": [(lexer.has("error") ? {type: "error"} : error)], "postprocess": id},
    {"name": "func$ebnf$6", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "func", "symbols": [(lexer.has("lparen") ? {type: "lparen"} : lparen), "_", "func$ebnf$6"], "postprocess": _('flatten', 'filter', 'error')},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", (lexer.has("space") ? {type: "space"} : space)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": _('first', 'flatten')},
    {"name": "__$ebnf$1", "symbols": [(lexer.has("space") ? {type: "space"} : space)]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", (lexer.has("space") ? {type: "space"} : space)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": _('first', 'flatten')}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
